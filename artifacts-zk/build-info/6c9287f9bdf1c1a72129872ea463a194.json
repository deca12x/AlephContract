{"id":"6c9287f9bdf1c1a72129872ea463a194","_format":"hh-sol-build-info-1","solcVersion":"0.8.20","solcLongVersion":"0.8.20+commit.a1b79de6","input":{"language":"Solidity","sources":{"contracts/MessageStorage.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\n/**\n * @title MessageStorage\n * @dev A gas-optimized contract for storing messages using assembly\n *\n * Storage Layout:\n * - Messages are ASCII encoded (1 byte per character)\n * - Each message is 60 characters (60 bytes)\n * - Each timestamp is 4 bytes (uint32)\n * - Total per message: 64 bytes (exactly 2 storage slots)\n * - Max 16 messages (32 storage slots total)\n * - Uses a circular buffer to overwrite oldest messages\n */\ncontract MessageStorage {\n    // Constants for storage optimization\n    uint256 private constant MAX_MESSAGES = 16;\n    uint256 private constant MESSAGE_SIZE_BYTES = 60; // 60 characters\n    uint256 private constant TIMESTAMP_SIZE_BYTES = 4; // uint32 timestamp\n    uint256 private constant BYTES_PER_SLOT = 32; // Ethereum storage slot size\n\n    // Storage variables\n    uint256 private currentIndex; // Track the current position in the circular buffer\n\n    // Data structures for storage\n    struct MessageData {\n        bytes32 part1;\n        bytes32 part2; // 28 bytes of message + 4 bytes timestamp\n    }\n\n    // Message storage - explicitly map indices to data\n    mapping(uint256 => MessageData) private messages;\n\n    // Event emitted when a new message is stored\n    event MessageStored(uint256 indexed index, uint256 timestamp);\n\n    constructor() {\n        // Initialize the current index to 0\n        currentIndex = 0;\n    }\n\n    /**\n     * @dev Store a message with the current timestamp\n     * @param message The ASCII message to store (must be exactly 60 characters)\n     * @return The index where the message was stored\n     */\n    function storeMessage(bytes calldata message) external returns (uint256) {\n        // Require exact message length\n        require(\n            message.length == MESSAGE_SIZE_BYTES,\n            \"Message must be exactly 60 bytes\"\n        );\n\n        // Get current timestamp as uint32 (4 bytes)\n        uint32 timestamp = uint32(block.timestamp);\n\n        // Get the index where we'll store this message\n        uint256 index = currentIndex;\n\n        // Store the first 32 bytes in part1\n        bytes32 firstPart;\n\n        // Copy the first 32 bytes of the message\n        assembly {\n            firstPart := calldataload(add(message.offset, 0))\n        }\n\n        // Store the remaining 28 bytes and timestamp in part2\n        bytes32 secondPart;\n\n        // Shift timestamp to high bytes (first 4 bytes of the slot)\n        uint256 timestampShifted = uint256(timestamp) << 224;\n\n        assembly {\n            // Load the remaining bytes starting from offset 32\n            let remaining := calldataload(add(message.offset, 32))\n\n            // Mask the remaining bytes to ensure only 28 bytes are used\n            // This ensures we have space for the 4-byte timestamp\n            let masked := and(\n                remaining,\n                0x00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n            )\n\n            // Combine with the timestamp\n            secondPart := or(masked, timestampShifted)\n        }\n\n        // Store both parts in the mapping\n        messages[index] = MessageData({part1: firstPart, part2: secondPart});\n\n        // Emit event with index and timestamp\n        emit MessageStored(index, timestamp);\n\n        // Update index for next message (circular buffer)\n        currentIndex = (currentIndex + 1) % MAX_MESSAGES;\n\n        return index;\n    }\n\n    /**\n     * @dev Retrieve all stored messages with their timestamps\n     * @return messages Array of stored messages\n     * @return timestamps Array of message timestamps\n     */\n    function getAllMessages()\n        external\n        view\n        returns (bytes[] memory, uint32[] memory)\n    {\n        bytes[] memory allMessages = new bytes[](MAX_MESSAGES);\n        uint32[] memory allTimestamps = new uint32[](MAX_MESSAGES);\n\n        // Iterate through all message slots and extract data\n        for (uint256 i = 0; i < MAX_MESSAGES; i++) {\n            MessageData storage data = messages[i];\n\n            // Create a new bytes array for this message\n            bytes memory messageBytes = new bytes(MESSAGE_SIZE_BYTES);\n\n            // Extract the timestamp from part2 (top 4 bytes)\n            uint32 timestamp = uint32(uint256(data.part2) >> 224);\n\n            // Copy the data to the messageBytes array using assembly\n            assembly {\n                // Copy first part\n                mstore(add(messageBytes, 32), mload(data.slot))\n\n                // Copy second part (mask out the timestamp)\n                let secondSlot := mload(add(data.slot, 32))\n                let maskedSecond := and(\n                    secondSlot,\n                    0x00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n                )\n                mstore(add(messageBytes, 64), maskedSecond)\n            }\n\n            // Store the results\n            allMessages[i] = messageBytes;\n            allTimestamps[i] = timestamp;\n        }\n\n        return (allMessages, allTimestamps);\n    }\n\n    /**\n     * @dev Get a specific stored message by index\n     * @param index The index of the message to retrieve\n     * @return part1 The first part of the message\n     * @return part2 The second part of the message (includes timestamp)\n     * @return timestamp The message timestamp\n     */\n    function getMessage(\n        uint256 index\n    ) external view returns (bytes32, bytes32, uint32) {\n        require(index < MAX_MESSAGES, \"Index out of bounds\");\n\n        MessageData storage data = messages[index];\n\n        // Extract the timestamp from part2 (top 4 bytes)\n        uint32 timestamp = uint32(uint256(data.part2) >> 224);\n\n        return (data.part1, data.part2, timestamp);\n    }\n\n    /**\n     * @dev Get the current index in the circular buffer\n     * @return The current index\n     */\n    function getCurrentIndex() external view returns (uint256) {\n        return currentIndex;\n    }\n}\n"}},"settings":{"optimizer":{"enabled":true,"mode":"3"},"evmVersion":"paris","outputSelection":{"*":{"*":["abi","evm.methodIdentifiers","metadata"],"":["ast"]}},"libraries":{}}},"output":{"errors":[{"component":"general","errorCode":null,"formattedMessage":"\n┌──────────────────────────────────────────────────────────────────────────────────────────────────┐\n│ Warning: You are using 'block.timestamp' in your code, which might lead to unexpected behaviour. │\n│ 'block.timestamp' actually refers to the timestamp of the whole batch that will be sent to L1.   │\n│ We are planning to change this in the near future so that it returns the timestamp of the L2     │\n│ block. A separate method will be introduced for accessing the timestamp of the L1 batch.         │\n│ More information here:                                                                           │\n│ https://github.com/zkSync-Community-Hub/zkync-developers/discussions/32                          │\n└──────────────────────────────────────────────────────────────────────────────────────────────────┘\n--> contracts/MessageStorage.sol\n","message":"\n┌──────────────────────────────────────────────────────────────────────────────────────────────────┐\n│ Warning: You are using 'block.timestamp' in your code, which might lead to unexpected behaviour. │\n│ 'block.timestamp' actually refers to the timestamp of the whole batch that will be sent to L1.   │\n│ We are planning to change this in the near future so that it returns the timestamp of the L2     │\n│ block. A separate method will be introduced for accessing the timestamp of the L1 batch.         │\n│ More information here:                                                                           │\n│ https://github.com/zkSync-Community-Hub/zkync-developers/discussions/32                          │\n└──────────────────────────────────────────────────────────────────────────────────────────────────┘","severity":"warning","sourceLocation":{"file":"0","start":1962,"end":1977},"type":"Warning"}],"version":"0.8.20","long_version":"0.8.20+commit.a1b79de6.Darwin.appleclang","zk_version":"1.3.14","sources":{"contracts/MessageStorage.sol":{"id":0,"ast":{"absolutePath":"contracts/MessageStorage.sol","exportedSymbols":{"MessageStorage":[257]},"id":258,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"32:24:0"},{"abstract":false,"baseContracts":[],"canonicalName":"MessageStorage","contractDependencies":[],"contractKind":"contract","documentation":{"id":2,"nodeType":"StructuredDocumentation","src":"58:426:0","text":" @title MessageStorage\n @dev A gas-optimized contract for storing messages using assembly\n Storage Layout:\n - Messages are ASCII encoded (1 byte per character)\n - Each message is 60 characters (60 bytes)\n - Each timestamp is 4 bytes (uint32)\n - Total per message: 64 bytes (exactly 2 storage slots)\n - Max 16 messages (32 storage slots total)\n - Uses a circular buffer to overwrite oldest messages"},"fullyImplemented":true,"id":257,"linearizedBaseContracts":[257],"name":"MessageStorage","nameLocation":"494:14:0","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":5,"mutability":"constant","name":"MAX_MESSAGES","nameLocation":"582:12:0","nodeType":"VariableDeclaration","scope":257,"src":"557:42:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3,"name":"uint256","nodeType":"ElementaryTypeName","src":"557:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"3136","id":4,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"597:2:0","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"visibility":"private"},{"constant":true,"id":8,"mutability":"constant","name":"MESSAGE_SIZE_BYTES","nameLocation":"630:18:0","nodeType":"VariableDeclaration","scope":257,"src":"605:48:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6,"name":"uint256","nodeType":"ElementaryTypeName","src":"605:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"3630","id":7,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"651:2:0","typeDescriptions":{"typeIdentifier":"t_rational_60_by_1","typeString":"int_const 60"},"value":"60"},"visibility":"private"},{"constant":true,"id":11,"mutability":"constant","name":"TIMESTAMP_SIZE_BYTES","nameLocation":"701:20:0","nodeType":"VariableDeclaration","scope":257,"src":"676:49:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":9,"name":"uint256","nodeType":"ElementaryTypeName","src":"676:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"34","id":10,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"724:1:0","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"visibility":"private"},{"constant":true,"id":14,"mutability":"constant","name":"BYTES_PER_SLOT","nameLocation":"776:14:0","nodeType":"VariableDeclaration","scope":257,"src":"751:44:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12,"name":"uint256","nodeType":"ElementaryTypeName","src":"751:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"3332","id":13,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"793:2:0","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"visibility":"private"},{"constant":false,"id":16,"mutability":"mutable","name":"currentIndex","nameLocation":"873:12:0","nodeType":"VariableDeclaration","scope":257,"src":"857:28:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":15,"name":"uint256","nodeType":"ElementaryTypeName","src":"857:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"canonicalName":"MessageStorage.MessageData","id":21,"members":[{"constant":false,"id":18,"mutability":"mutable","name":"part1","nameLocation":"1017:5:0","nodeType":"VariableDeclaration","scope":21,"src":"1009:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":17,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1009:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":20,"mutability":"mutable","name":"part2","nameLocation":"1040:5:0","nodeType":"VariableDeclaration","scope":21,"src":"1032:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":19,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1032:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"name":"MessageData","nameLocation":"987:11:0","nodeType":"StructDefinition","scope":257,"src":"980:115:0","visibility":"public"},{"constant":false,"id":26,"mutability":"mutable","name":"messages","nameLocation":"1197:8:0","nodeType":"VariableDeclaration","scope":257,"src":"1157:48:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_MessageData_$21_storage_$","typeString":"mapping(uint256 => struct MessageStorage.MessageData)"},"typeName":{"id":25,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":22,"name":"uint256","nodeType":"ElementaryTypeName","src":"1165:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"1157:31:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_MessageData_$21_storage_$","typeString":"mapping(uint256 => struct MessageStorage.MessageData)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":24,"nodeType":"UserDefinedTypeName","pathNode":{"id":23,"name":"MessageData","nameLocations":["1176:11:0"],"nodeType":"IdentifierPath","referencedDeclaration":21,"src":"1176:11:0"},"referencedDeclaration":21,"src":"1176:11:0","typeDescriptions":{"typeIdentifier":"t_struct$_MessageData_$21_storage_ptr","typeString":"struct MessageStorage.MessageData"}}},"visibility":"private"},{"anonymous":false,"eventSelector":"b9e41f69bdba34228b9dba54f42763e637271900a064ff2f9d9a71a2741c49b3","id":32,"name":"MessageStored","nameLocation":"1268:13:0","nodeType":"EventDefinition","parameters":{"id":31,"nodeType":"ParameterList","parameters":[{"constant":false,"id":28,"indexed":true,"mutability":"mutable","name":"index","nameLocation":"1298:5:0","nodeType":"VariableDeclaration","scope":32,"src":"1282:21:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":27,"name":"uint256","nodeType":"ElementaryTypeName","src":"1282:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":30,"indexed":false,"mutability":"mutable","name":"timestamp","nameLocation":"1313:9:0","nodeType":"VariableDeclaration","scope":32,"src":"1305:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":29,"name":"uint256","nodeType":"ElementaryTypeName","src":"1305:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1281:42:0"},"src":"1262:62:0"},{"body":{"id":39,"nodeType":"Block","src":"1344:78:0","statements":[{"expression":{"id":37,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":35,"name":"currentIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":16,"src":"1399:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":36,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1414:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1399:16:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":38,"nodeType":"ExpressionStatement","src":"1399:16:0"}]},"id":40,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":33,"nodeType":"ParameterList","parameters":[],"src":"1341:2:0"},"returnParameters":{"id":34,"nodeType":"ParameterList","parameters":[],"src":"1344:0:0"},"scope":257,"src":"1330:92:0","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":110,"nodeType":"Block","src":"1707:1724:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":52,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":49,"name":"message","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43,"src":"1778:7:0","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"id":50,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1786:6:0","memberName":"length","nodeType":"MemberAccess","src":"1778:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":51,"name":"MESSAGE_SIZE_BYTES","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8,"src":"1796:18:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1778:36:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4d657373616765206d7573742062652065786163746c79203630206279746573","id":53,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1828:34:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_fb54e3dd177510ecc02cc273267edaa3fa015abe36c66db1c76e1874d8b969cb","typeString":"literal_string \"Message must be exactly 60 bytes\""},"value":"Message must be exactly 60 bytes"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_fb54e3dd177510ecc02cc273267edaa3fa015abe36c66db1c76e1874d8b969cb","typeString":"literal_string \"Message must be exactly 60 bytes\""}],"id":48,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1757:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":54,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1757:115:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":55,"nodeType":"ExpressionStatement","src":"1757:115:0"},{"assignments":[57],"declarations":[{"constant":false,"id":57,"mutability":"mutable","name":"timestamp","nameLocation":"1943:9:0","nodeType":"VariableDeclaration","scope":110,"src":"1936:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":56,"name":"uint32","nodeType":"ElementaryTypeName","src":"1936:6:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"id":63,"initialValue":{"arguments":[{"expression":{"id":60,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"1962:5:0","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":61,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1968:9:0","memberName":"timestamp","nodeType":"MemberAccess","src":"1962:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":59,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1955:6:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint32_$","typeString":"type(uint32)"},"typeName":{"id":58,"name":"uint32","nodeType":"ElementaryTypeName","src":"1955:6:0","typeDescriptions":{}}},"id":62,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1955:23:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"VariableDeclarationStatement","src":"1936:42:0"},{"assignments":[65],"declarations":[{"constant":false,"id":65,"mutability":"mutable","name":"index","nameLocation":"2053:5:0","nodeType":"VariableDeclaration","scope":110,"src":"2045:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":64,"name":"uint256","nodeType":"ElementaryTypeName","src":"2045:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":67,"initialValue":{"id":66,"name":"currentIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":16,"src":"2061:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2045:28:0"},{"assignments":[69],"declarations":[{"constant":false,"id":69,"mutability":"mutable","name":"firstPart","nameLocation":"2137:9:0","nodeType":"VariableDeclaration","scope":110,"src":"2129:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":68,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2129:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":70,"nodeType":"VariableDeclarationStatement","src":"2129:17:0"},{"AST":{"nodeType":"YulBlock","src":"2216:73:0","statements":[{"nodeType":"YulAssignment","src":"2230:49:0","value":{"arguments":[{"arguments":[{"name":"message.offset","nodeType":"YulIdentifier","src":"2260:14:0"},{"kind":"number","nodeType":"YulLiteral","src":"2276:1:0","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2256:3:0"},"nodeType":"YulFunctionCall","src":"2256:22:0"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2243:12:0"},"nodeType":"YulFunctionCall","src":"2243:36:0"},"variableNames":[{"name":"firstPart","nodeType":"YulIdentifier","src":"2230:9:0"}]}]},"evmVersion":"shanghai","externalReferences":[{"declaration":69,"isOffset":false,"isSlot":false,"src":"2230:9:0","valueSize":1},{"declaration":43,"isOffset":true,"isSlot":false,"src":"2260:14:0","suffix":"offset","valueSize":1}],"id":71,"nodeType":"InlineAssembly","src":"2207:82:0"},{"assignments":[73],"declarations":[{"constant":false,"id":73,"mutability":"mutable","name":"secondPart","nameLocation":"2370:10:0","nodeType":"VariableDeclaration","scope":110,"src":"2362:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":72,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2362:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":74,"nodeType":"VariableDeclarationStatement","src":"2362:18:0"},{"assignments":[76],"declarations":[{"constant":false,"id":76,"mutability":"mutable","name":"timestampShifted","nameLocation":"2468:16:0","nodeType":"VariableDeclaration","scope":110,"src":"2460:24:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":75,"name":"uint256","nodeType":"ElementaryTypeName","src":"2460:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":83,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":82,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":79,"name":"timestamp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":57,"src":"2495:9:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint32","typeString":"uint32"}],"id":78,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2487:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":77,"name":"uint256","nodeType":"ElementaryTypeName","src":"2487:7:0","typeDescriptions":{}}},"id":80,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2487:18:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"323234","id":81,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2509:3:0","typeDescriptions":{"typeIdentifier":"t_rational_224_by_1","typeString":"int_const 224"},"value":"224"},"src":"2487:25:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2460:52:0"},{"AST":{"nodeType":"YulBlock","src":"2532:536:0","statements":[{"nodeType":"YulVariableDeclaration","src":"2610:54:0","value":{"arguments":[{"arguments":[{"name":"message.offset","nodeType":"YulIdentifier","src":"2644:14:0"},{"kind":"number","nodeType":"YulLiteral","src":"2660:2:0","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2640:3:0"},"nodeType":"YulFunctionCall","src":"2640:23:0"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2627:12:0"},"nodeType":"YulFunctionCall","src":"2627:37:0"},"variables":[{"name":"remaining","nodeType":"YulTypedName","src":"2614:9:0","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2818:142:0","value":{"arguments":[{"name":"remaining","nodeType":"YulIdentifier","src":"2853:9:0"},{"kind":"number","nodeType":"YulLiteral","src":"2880:66:0","type":"","value":"0x00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2832:3:0"},"nodeType":"YulFunctionCall","src":"2832:128:0"},"variables":[{"name":"masked","nodeType":"YulTypedName","src":"2822:6:0","type":""}]},{"nodeType":"YulAssignment","src":"3016:42:0","value":{"arguments":[{"name":"masked","nodeType":"YulIdentifier","src":"3033:6:0"},{"name":"timestampShifted","nodeType":"YulIdentifier","src":"3041:16:0"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"3030:2:0"},"nodeType":"YulFunctionCall","src":"3030:28:0"},"variableNames":[{"name":"secondPart","nodeType":"YulIdentifier","src":"3016:10:0"}]}]},"evmVersion":"shanghai","externalReferences":[{"declaration":43,"isOffset":true,"isSlot":false,"src":"2644:14:0","suffix":"offset","valueSize":1},{"declaration":73,"isOffset":false,"isSlot":false,"src":"3016:10:0","valueSize":1},{"declaration":76,"isOffset":false,"isSlot":false,"src":"3041:16:0","valueSize":1}],"id":84,"nodeType":"InlineAssembly","src":"2523:545:0"},{"expression":{"id":92,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":85,"name":"messages","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":26,"src":"3121:8:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_MessageData_$21_storage_$","typeString":"mapping(uint256 => struct MessageStorage.MessageData storage ref)"}},"id":87,"indexExpression":{"id":86,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":65,"src":"3130:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3121:15:0","typeDescriptions":{"typeIdentifier":"t_struct$_MessageData_$21_storage","typeString":"struct MessageStorage.MessageData storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":89,"name":"firstPart","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":69,"src":"3159:9:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":90,"name":"secondPart","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":73,"src":"3177:10:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":88,"name":"MessageData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":21,"src":"3139:11:0","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_MessageData_$21_storage_ptr_$","typeString":"type(struct MessageStorage.MessageData storage pointer)"}},"id":91,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":["3152:5:0","3170:5:0"],"names":["part1","part2"],"nodeType":"FunctionCall","src":"3139:50:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_MessageData_$21_memory_ptr","typeString":"struct MessageStorage.MessageData memory"}},"src":"3121:68:0","typeDescriptions":{"typeIdentifier":"t_struct$_MessageData_$21_storage","typeString":"struct MessageStorage.MessageData storage ref"}},"id":93,"nodeType":"ExpressionStatement","src":"3121:68:0"},{"eventCall":{"arguments":[{"id":95,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":65,"src":"3266:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":96,"name":"timestamp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":57,"src":"3273:9:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint32","typeString":"uint32"}],"id":94,"name":"MessageStored","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":32,"src":"3252:13:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256)"}},"id":97,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3252:31:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":98,"nodeType":"EmitStatement","src":"3247:36:0"},{"expression":{"id":106,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":99,"name":"currentIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":16,"src":"3353:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":105,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":102,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":100,"name":"currentIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":16,"src":"3369:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":101,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3384:1:0","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3369:16:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":103,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3368:18:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"id":104,"name":"MAX_MESSAGES","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5,"src":"3389:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3368:33:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3353:48:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":107,"nodeType":"ExpressionStatement","src":"3353:48:0"},{"expression":{"id":108,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":65,"src":"3419:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":47,"id":109,"nodeType":"Return","src":"3412:12:0"}]},"documentation":{"id":41,"nodeType":"StructuredDocumentation","src":"1428:201:0","text":" @dev Store a message with the current timestamp\n @param message The ASCII message to store (must be exactly 60 characters)\n @return The index where the message was stored"},"functionSelector":"61a1fb6e","id":111,"implemented":true,"kind":"function","modifiers":[],"name":"storeMessage","nameLocation":"1643:12:0","nodeType":"FunctionDefinition","parameters":{"id":44,"nodeType":"ParameterList","parameters":[{"constant":false,"id":43,"mutability":"mutable","name":"message","nameLocation":"1671:7:0","nodeType":"VariableDeclaration","scope":111,"src":"1656:22:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":42,"name":"bytes","nodeType":"ElementaryTypeName","src":"1656:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1655:24:0"},"returnParameters":{"id":47,"nodeType":"ParameterList","parameters":[{"constant":false,"id":46,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":111,"src":"1698:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":45,"name":"uint256","nodeType":"ElementaryTypeName","src":"1698:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1697:9:0"},"scope":257,"src":"1634:1797:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":199,"nodeType":"Block","src":"3729:1308:0","statements":[{"assignments":[125],"declarations":[{"constant":false,"id":125,"mutability":"mutable","name":"allMessages","nameLocation":"3754:11:0","nodeType":"VariableDeclaration","scope":199,"src":"3739:26:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":123,"name":"bytes","nodeType":"ElementaryTypeName","src":"3739:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":124,"nodeType":"ArrayTypeName","src":"3739:7:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"visibility":"internal"}],"id":131,"initialValue":{"arguments":[{"id":129,"name":"MAX_MESSAGES","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5,"src":"3780:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":128,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"3768:11:0","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory[] memory)"},"typeName":{"baseType":{"id":126,"name":"bytes","nodeType":"ElementaryTypeName","src":"3772:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":127,"nodeType":"ArrayTypeName","src":"3772:7:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}}},"id":130,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3768:25:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"nodeType":"VariableDeclarationStatement","src":"3739:54:0"},{"assignments":[136],"declarations":[{"constant":false,"id":136,"mutability":"mutable","name":"allTimestamps","nameLocation":"3819:13:0","nodeType":"VariableDeclaration","scope":199,"src":"3803:29:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint32_$dyn_memory_ptr","typeString":"uint32[]"},"typeName":{"baseType":{"id":134,"name":"uint32","nodeType":"ElementaryTypeName","src":"3803:6:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"id":135,"nodeType":"ArrayTypeName","src":"3803:8:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint32_$dyn_storage_ptr","typeString":"uint32[]"}},"visibility":"internal"}],"id":142,"initialValue":{"arguments":[{"id":140,"name":"MAX_MESSAGES","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5,"src":"3848:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":139,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"3835:12:0","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_uint32_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (uint32[] memory)"},"typeName":{"baseType":{"id":137,"name":"uint32","nodeType":"ElementaryTypeName","src":"3839:6:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"id":138,"nodeType":"ArrayTypeName","src":"3839:8:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint32_$dyn_storage_ptr","typeString":"uint32[]"}}},"id":141,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3835:26:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint32_$dyn_memory_ptr","typeString":"uint32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"3803:58:0"},{"body":{"id":193,"nodeType":"Block","src":"3977:1008:0","statements":[{"assignments":[155],"declarations":[{"constant":false,"id":155,"mutability":"mutable","name":"data","nameLocation":"4011:4:0","nodeType":"VariableDeclaration","scope":193,"src":"3991:24:0","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_MessageData_$21_storage_ptr","typeString":"struct MessageStorage.MessageData"},"typeName":{"id":154,"nodeType":"UserDefinedTypeName","pathNode":{"id":153,"name":"MessageData","nameLocations":["3991:11:0"],"nodeType":"IdentifierPath","referencedDeclaration":21,"src":"3991:11:0"},"referencedDeclaration":21,"src":"3991:11:0","typeDescriptions":{"typeIdentifier":"t_struct$_MessageData_$21_storage_ptr","typeString":"struct MessageStorage.MessageData"}},"visibility":"internal"}],"id":159,"initialValue":{"baseExpression":{"id":156,"name":"messages","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":26,"src":"4018:8:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_MessageData_$21_storage_$","typeString":"mapping(uint256 => struct MessageStorage.MessageData storage ref)"}},"id":158,"indexExpression":{"id":157,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":144,"src":"4027:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4018:11:0","typeDescriptions":{"typeIdentifier":"t_struct$_MessageData_$21_storage","typeString":"struct MessageStorage.MessageData storage ref"}},"nodeType":"VariableDeclarationStatement","src":"3991:38:0"},{"assignments":[161],"declarations":[{"constant":false,"id":161,"mutability":"mutable","name":"messageBytes","nameLocation":"4114:12:0","nodeType":"VariableDeclaration","scope":193,"src":"4101:25:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":160,"name":"bytes","nodeType":"ElementaryTypeName","src":"4101:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":166,"initialValue":{"arguments":[{"id":164,"name":"MESSAGE_SIZE_BYTES","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8,"src":"4139:18:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":163,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"4129:9:0","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":162,"name":"bytes","nodeType":"ElementaryTypeName","src":"4133:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":165,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4129:29:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"4101:57:0"},{"assignments":[168],"declarations":[{"constant":false,"id":168,"mutability":"mutable","name":"timestamp","nameLocation":"4242:9:0","nodeType":"VariableDeclaration","scope":193,"src":"4235:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":167,"name":"uint32","nodeType":"ElementaryTypeName","src":"4235:6:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"id":179,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":177,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"expression":{"id":173,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":155,"src":"4269:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_MessageData_$21_storage_ptr","typeString":"struct MessageStorage.MessageData storage pointer"}},"id":174,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4274:5:0","memberName":"part2","nodeType":"MemberAccess","referencedDeclaration":20,"src":"4269:10:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":172,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4261:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":171,"name":"uint256","nodeType":"ElementaryTypeName","src":"4261:7:0","typeDescriptions":{}}},"id":175,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4261:19:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"323234","id":176,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4284:3:0","typeDescriptions":{"typeIdentifier":"t_rational_224_by_1","typeString":"int_const 224"},"value":"224"},"src":"4261:26:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":170,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4254:6:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint32_$","typeString":"type(uint32)"},"typeName":{"id":169,"name":"uint32","nodeType":"ElementaryTypeName","src":"4254:6:0","typeDescriptions":{}}},"id":178,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4254:34:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"VariableDeclarationStatement","src":"4235:53:0"},{"AST":{"nodeType":"YulBlock","src":"4382:474:0","statements":[{"expression":{"arguments":[{"arguments":[{"name":"messageBytes","nodeType":"YulIdentifier","src":"4446:12:0"},{"kind":"number","nodeType":"YulLiteral","src":"4460:2:0","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4442:3:0"},"nodeType":"YulFunctionCall","src":"4442:21:0"},{"arguments":[{"name":"data.slot","nodeType":"YulIdentifier","src":"4471:9:0"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4465:5:0"},"nodeType":"YulFunctionCall","src":"4465:16:0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4435:6:0"},"nodeType":"YulFunctionCall","src":"4435:47:0"},"nodeType":"YulExpressionStatement","src":"4435:47:0"},{"nodeType":"YulVariableDeclaration","src":"4561:43:0","value":{"arguments":[{"arguments":[{"name":"data.slot","nodeType":"YulIdentifier","src":"4589:9:0"},{"kind":"number","nodeType":"YulLiteral","src":"4600:2:0","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4585:3:0"},"nodeType":"YulFunctionCall","src":"4585:18:0"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4579:5:0"},"nodeType":"YulFunctionCall","src":"4579:25:0"},"variables":[{"name":"secondSlot","nodeType":"YulTypedName","src":"4565:10:0","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4621:161:0","value":{"arguments":[{"name":"secondSlot","nodeType":"YulIdentifier","src":"4666:10:0"},{"kind":"number","nodeType":"YulLiteral","src":"4698:66:0","type":"","value":"0x00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4641:3:0"},"nodeType":"YulFunctionCall","src":"4641:141:0"},"variables":[{"name":"maskedSecond","nodeType":"YulTypedName","src":"4625:12:0","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"messageBytes","nodeType":"YulIdentifier","src":"4810:12:0"},{"kind":"number","nodeType":"YulLiteral","src":"4824:2:0","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4806:3:0"},"nodeType":"YulFunctionCall","src":"4806:21:0"},{"name":"maskedSecond","nodeType":"YulIdentifier","src":"4829:12:0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4799:6:0"},"nodeType":"YulFunctionCall","src":"4799:43:0"},"nodeType":"YulExpressionStatement","src":"4799:43:0"}]},"evmVersion":"shanghai","externalReferences":[{"declaration":155,"isOffset":false,"isSlot":true,"src":"4471:9:0","suffix":"slot","valueSize":1},{"declaration":155,"isOffset":false,"isSlot":true,"src":"4589:9:0","suffix":"slot","valueSize":1},{"declaration":161,"isOffset":false,"isSlot":false,"src":"4446:12:0","valueSize":1},{"declaration":161,"isOffset":false,"isSlot":false,"src":"4810:12:0","valueSize":1}],"id":180,"nodeType":"InlineAssembly","src":"4373:483:0"},{"expression":{"id":185,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":181,"name":"allMessages","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":125,"src":"4903:11:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"id":183,"indexExpression":{"id":182,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":144,"src":"4915:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4903:14:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":184,"name":"messageBytes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":161,"src":"4920:12:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"src":"4903:29:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":186,"nodeType":"ExpressionStatement","src":"4903:29:0"},{"expression":{"id":191,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":187,"name":"allTimestamps","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":136,"src":"4946:13:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint32_$dyn_memory_ptr","typeString":"uint32[] memory"}},"id":189,"indexExpression":{"id":188,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":144,"src":"4960:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4946:16:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":190,"name":"timestamp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":168,"src":"4965:9:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"src":"4946:28:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"id":192,"nodeType":"ExpressionStatement","src":"4946:28:0"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":149,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":147,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":144,"src":"3954:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":148,"name":"MAX_MESSAGES","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5,"src":"3958:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3954:16:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":194,"initializationExpression":{"assignments":[144],"declarations":[{"constant":false,"id":144,"mutability":"mutable","name":"i","nameLocation":"3947:1:0","nodeType":"VariableDeclaration","scope":194,"src":"3939:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":143,"name":"uint256","nodeType":"ElementaryTypeName","src":"3939:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":146,"initialValue":{"hexValue":"30","id":145,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3951:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"3939:13:0"},"loopExpression":{"expression":{"id":151,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"3972:3:0","subExpression":{"id":150,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":144,"src":"3972:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":152,"nodeType":"ExpressionStatement","src":"3972:3:0"},"nodeType":"ForStatement","src":"3934:1051:0"},{"expression":{"components":[{"id":195,"name":"allMessages","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":125,"src":"5003:11:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},{"id":196,"name":"allTimestamps","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":136,"src":"5016:13:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint32_$dyn_memory_ptr","typeString":"uint32[] memory"}}],"id":197,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5002:28:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_$_t_array$_t_uint32_$dyn_memory_ptr_$","typeString":"tuple(bytes memory[] memory,uint32[] memory)"}},"functionReturnParameters":120,"id":198,"nodeType":"Return","src":"4995:35:0"}]},"documentation":{"id":112,"nodeType":"StructuredDocumentation","src":"3437:177:0","text":" @dev Retrieve all stored messages with their timestamps\n @return messages Array of stored messages\n @return timestamps Array of message timestamps"},"functionSelector":"53f5e380","id":200,"implemented":true,"kind":"function","modifiers":[],"name":"getAllMessages","nameLocation":"3628:14:0","nodeType":"FunctionDefinition","parameters":{"id":113,"nodeType":"ParameterList","parameters":[],"src":"3642:2:0"},"returnParameters":{"id":120,"nodeType":"ParameterList","parameters":[{"constant":false,"id":116,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":200,"src":"3692:14:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":114,"name":"bytes","nodeType":"ElementaryTypeName","src":"3692:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":115,"nodeType":"ArrayTypeName","src":"3692:7:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"visibility":"internal"},{"constant":false,"id":119,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":200,"src":"3708:15:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint32_$dyn_memory_ptr","typeString":"uint32[]"},"typeName":{"baseType":{"id":117,"name":"uint32","nodeType":"ElementaryTypeName","src":"3708:6:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"id":118,"nodeType":"ArrayTypeName","src":"3708:8:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint32_$dyn_storage_ptr","typeString":"uint32[]"}},"visibility":"internal"}],"src":"3691:33:0"},"scope":257,"src":"3619:1418:0","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":246,"nodeType":"Block","src":"5436:297:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":215,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":213,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":203,"src":"5454:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":214,"name":"MAX_MESSAGES","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5,"src":"5462:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5454:20:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e646578206f7574206f6620626f756e6473","id":216,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5476:21:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_dd00b67a545791a54dd99d9c09eb42099756ea4ee2bd47188784c22234589367","typeString":"literal_string \"Index out of bounds\""},"value":"Index out of bounds"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_dd00b67a545791a54dd99d9c09eb42099756ea4ee2bd47188784c22234589367","typeString":"literal_string \"Index out of bounds\""}],"id":212,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5446:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":217,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5446:52:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":218,"nodeType":"ExpressionStatement","src":"5446:52:0"},{"assignments":[221],"declarations":[{"constant":false,"id":221,"mutability":"mutable","name":"data","nameLocation":"5529:4:0","nodeType":"VariableDeclaration","scope":246,"src":"5509:24:0","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_MessageData_$21_storage_ptr","typeString":"struct MessageStorage.MessageData"},"typeName":{"id":220,"nodeType":"UserDefinedTypeName","pathNode":{"id":219,"name":"MessageData","nameLocations":["5509:11:0"],"nodeType":"IdentifierPath","referencedDeclaration":21,"src":"5509:11:0"},"referencedDeclaration":21,"src":"5509:11:0","typeDescriptions":{"typeIdentifier":"t_struct$_MessageData_$21_storage_ptr","typeString":"struct MessageStorage.MessageData"}},"visibility":"internal"}],"id":225,"initialValue":{"baseExpression":{"id":222,"name":"messages","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":26,"src":"5536:8:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_MessageData_$21_storage_$","typeString":"mapping(uint256 => struct MessageStorage.MessageData storage ref)"}},"id":224,"indexExpression":{"id":223,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":203,"src":"5545:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5536:15:0","typeDescriptions":{"typeIdentifier":"t_struct$_MessageData_$21_storage","typeString":"struct MessageStorage.MessageData storage ref"}},"nodeType":"VariableDeclarationStatement","src":"5509:42:0"},{"assignments":[227],"declarations":[{"constant":false,"id":227,"mutability":"mutable","name":"timestamp","nameLocation":"5627:9:0","nodeType":"VariableDeclaration","scope":246,"src":"5620:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":226,"name":"uint32","nodeType":"ElementaryTypeName","src":"5620:6:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"id":238,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":236,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"expression":{"id":232,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":221,"src":"5654:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_MessageData_$21_storage_ptr","typeString":"struct MessageStorage.MessageData storage pointer"}},"id":233,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5659:5:0","memberName":"part2","nodeType":"MemberAccess","referencedDeclaration":20,"src":"5654:10:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":231,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5646:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":230,"name":"uint256","nodeType":"ElementaryTypeName","src":"5646:7:0","typeDescriptions":{}}},"id":234,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5646:19:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"323234","id":235,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5669:3:0","typeDescriptions":{"typeIdentifier":"t_rational_224_by_1","typeString":"int_const 224"},"value":"224"},"src":"5646:26:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":229,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5639:6:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint32_$","typeString":"type(uint32)"},"typeName":{"id":228,"name":"uint32","nodeType":"ElementaryTypeName","src":"5639:6:0","typeDescriptions":{}}},"id":237,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5639:34:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"VariableDeclarationStatement","src":"5620:53:0"},{"expression":{"components":[{"expression":{"id":239,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":221,"src":"5692:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_MessageData_$21_storage_ptr","typeString":"struct MessageStorage.MessageData storage pointer"}},"id":240,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5697:5:0","memberName":"part1","nodeType":"MemberAccess","referencedDeclaration":18,"src":"5692:10:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"id":241,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":221,"src":"5704:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_MessageData_$21_storage_ptr","typeString":"struct MessageStorage.MessageData storage pointer"}},"id":242,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5709:5:0","memberName":"part2","nodeType":"MemberAccess","referencedDeclaration":20,"src":"5704:10:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":243,"name":"timestamp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":227,"src":"5716:9:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}}],"id":244,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5691:35:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bytes32_$_t_bytes32_$_t_uint32_$","typeString":"tuple(bytes32,bytes32,uint32)"}},"functionReturnParameters":211,"id":245,"nodeType":"Return","src":"5684:42:0"}]},"documentation":{"id":201,"nodeType":"StructuredDocumentation","src":"5043:290:0","text":" @dev Get a specific stored message by index\n @param index The index of the message to retrieve\n @return part1 The first part of the message\n @return part2 The second part of the message (includes timestamp)\n @return timestamp The message timestamp"},"functionSelector":"86f79edb","id":247,"implemented":true,"kind":"function","modifiers":[],"name":"getMessage","nameLocation":"5347:10:0","nodeType":"FunctionDefinition","parameters":{"id":204,"nodeType":"ParameterList","parameters":[{"constant":false,"id":203,"mutability":"mutable","name":"index","nameLocation":"5375:5:0","nodeType":"VariableDeclaration","scope":247,"src":"5367:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":202,"name":"uint256","nodeType":"ElementaryTypeName","src":"5367:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5357:29:0"},"returnParameters":{"id":211,"nodeType":"ParameterList","parameters":[{"constant":false,"id":206,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":247,"src":"5410:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":205,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5410:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":208,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":247,"src":"5419:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":207,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5419:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":210,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":247,"src":"5428:6:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":209,"name":"uint32","nodeType":"ElementaryTypeName","src":"5428:6:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"5409:26:0"},"scope":257,"src":"5338:395:0","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":255,"nodeType":"Block","src":"5904:36:0","statements":[{"expression":{"id":253,"name":"currentIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":16,"src":"5921:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":252,"id":254,"nodeType":"Return","src":"5914:19:0"}]},"documentation":{"id":248,"nodeType":"StructuredDocumentation","src":"5739:101:0","text":" @dev Get the current index in the circular buffer\n @return The current index"},"functionSelector":"0d9005ae","id":256,"implemented":true,"kind":"function","modifiers":[],"name":"getCurrentIndex","nameLocation":"5854:15:0","nodeType":"FunctionDefinition","parameters":{"id":249,"nodeType":"ParameterList","parameters":[],"src":"5869:2:0"},"returnParameters":{"id":252,"nodeType":"ParameterList","parameters":[{"constant":false,"id":251,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":256,"src":"5895:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":250,"name":"uint256","nodeType":"ElementaryTypeName","src":"5895:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5894:9:0"},"scope":257,"src":"5845:95:0","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":258,"src":"485:5457:0","usedErrors":[],"usedEvents":[32]}],"src":"32:5911:0"}}},"contracts":{"contracts/MessageStorage.sol":{"MessageStorage":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"index","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"timestamp","type":"uint256"}],"name":"MessageStored","type":"event"},{"inputs":[],"name":"getAllMessages","outputs":[{"internalType":"bytes[]","name":"","type":"bytes[]"},{"internalType":"uint32[]","name":"","type":"uint32[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getCurrentIndex","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"index","type":"uint256"}],"name":"getMessage","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"},{"internalType":"bytes32","name":"","type":"bytes32"},{"internalType":"uint32","name":"","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"message","type":"bytes"}],"name":"storeMessage","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"}],"metadata":{"optimizer_settings":"M3B3","solc_metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"MessageStored\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getAllMessages\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"\",\"type\":\"bytes[]\"},{\"internalType\":\"uint32[]\",\"name\":\"\",\"type\":\"uint32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getMessage\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"storeMessage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"A gas-optimized contract for storing messages using assembly Storage Layout: - Messages are ASCII encoded (1 byte per character) - Each message is 60 characters (60 bytes) - Each timestamp is 4 bytes (uint32) - Total per message: 64 bytes (exactly 2 storage slots) - Max 16 messages (32 storage slots total) - Uses a circular buffer to overwrite oldest messages\",\"kind\":\"dev\",\"methods\":{\"getAllMessages()\":{\"details\":\"Retrieve all stored messages with their timestamps\",\"returns\":{\"_0\":\"messages Array of stored messages\",\"_1\":\"timestamps Array of message timestamps\"}},\"getCurrentIndex()\":{\"details\":\"Get the current index in the circular buffer\",\"returns\":{\"_0\":\"The current index\"}},\"getMessage(uint256)\":{\"details\":\"Get a specific stored message by index\",\"params\":{\"index\":\"The index of the message to retrieve\"},\"returns\":{\"_0\":\"part1 The first part of the message\",\"_1\":\"part2 The second part of the message (includes timestamp)\",\"_2\":\"timestamp The message timestamp\"}},\"storeMessage(bytes)\":{\"details\":\"Store a message with the current timestamp\",\"params\":{\"message\":\"The ASCII message to store (must be exactly 60 characters)\"},\"returns\":{\"_0\":\"The index where the message was stored\"}}},\"title\":\"MessageStorage\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MessageStorage.sol\":\"MessageStorage\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul:fDnTOc\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/MessageStorage.sol\":{\"keccak256\":\"0x0a43e49724bab64afa84ff6c39ba3c1d514350ecd3a62745b5471650301a2cb6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://431186fd3208b176cdc1ebd37a54740b14fbe30e0d37a12bac021670699997db\",\"dweb:/ipfs/QmTStgzN1xX8ua1QtnLkvAzBs7gt7yghucRzQzcuR2GTE5\"]}},\"version\":1}","zk_version":"1.3.14"},"evm":{"legacyAssembly":null,"assembly":"\t.text\n\t.file\t\"MessageStorage.sol:MessageStorage\"\n\t.globl\t__entry\n__entry:\n.func_begin0:\n\tnop\tstack+=[8]\n\tptr.add\tr1, r0, stack[@ptr_calldata]\n\tshr.s\t96, r1, r1\n\tand\t@CPI0_0[0], r1, stack[@calldatasize]\n\tadd\t128, r0, r1\n\tst.1\t64, r1\n\tand!\t1, r2, r1\n\tjump.ne\t@.BB0_1\n\tadd\tstack[@calldatasize], r0, r1\n\tsub.s!\t4, r1, r1\n\tjump.lt\t@.BB0_2\n\tptr.add\tstack[@ptr_calldata], r0, r1\n\tld\tr1, r1\n\tshr.s\t224, r1, r1\n\tsub.s!\t@CPI0_2[0], r1, r2\n\tjump.gt\t@.BB0_8\n\tsub.s!\t@CPI0_5[0], r1, r2\n\tjump.eq\t@.BB0_10\n\tsub.s!\t@CPI0_6[0], r1, r1\n\tjump.ne\t@.BB0_2\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tsub.s\t4, r0, r1\n\tadd\tstack[@calldatasize], r1, r1\n\tadd\t@CPI0_7[0], r0, r2\n\tsub!\tr1, r0, r3\n\tadd\tr0, r0, r3\n\tadd.lt\tr2, r0, r3\n\tand\t@CPI0_7[0], r1, r1\n\tsub!\tr1, r0, r4\n\tadd.le\tr0, r0, r2\n\tsub.s!\t@CPI0_7[0], r1, r1\n\tadd\tr3, r0, r1\n\tadd.eq\tr2, r0, r1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tld.1\t64, r8\n\tsub.s!\t@CPI0_13[0], r8, r1\n\tjump.ge\t@.BB0_16\n\tadd\t544, r8, r1\n\tst.1\t64, r1\n\tadd\t512, r8, r2\n\tadd\t96, r0, r1\n\tst.1\tr2, r1\n\tadd\t480, r8, r2\n\tst.1\tr2, r1\n\tadd\t448, r8, r2\n\tst.1\tr2, r1\n\tadd\t416, r8, r2\n\tst.1\tr2, r1\n\tadd\t384, r8, r2\n\tst.1\tr2, r1\n\tadd\t352, r8, r2\n\tst.1\tr2, r1\n\tadd\t320, r8, r2\n\tst.1\tr2, r1\n\tadd\t288, r8, r2\n\tst.1\tr2, r1\n\tadd\t256, r8, r2\n\tst.1\tr2, r1\n\tadd\t224, r8, r2\n\tst.1\tr2, r1\n\tadd\t192, r8, r2\n\tst.1\tr2, r1\n\tadd\t160, r8, r2\n\tst.1\tr2, r1\n\tadd\t128, r8, r2\n\tst.1\tr2, r1\n\tadd\t96, r8, r2\n\tst.1\tr2, r1\n\tadd\t64, r8, r2\n\tst.1\tr2, r1\n\tadd\t16, r0, r2\n\tst.1.inc\tr8, r2, r3\n\tadd\tr3, r0, stack-[6]\n\tst.1\tr3, r1\n\tld.1\t64, r1\n\tadd\tr1, r0, stack-[7]\n\tsub.s!\t@CPI0_14[0], r1, r1\n\tjump.le\t@.BB0_18\n.BB0_16:\n\tadd\t@CPI0_18[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI0_19[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_1:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tsstore\tr0, r0\n\tadd\t32, r0, r1\n\tst.2\t256, r1\n\tst.2\t288, r0\n\tadd\t@CPI0_1[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_8:\n\tsub.s!\t@CPI0_3[0], r1, r2\n\tjump.eq\t@.BB0_31\n\tsub.s!\t@CPI0_4[0], r1, r1\n\tjump.ne\t@.BB0_2\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tsub.s\t4, r0, r1\n\tadd\tstack[@calldatasize], r1, r1\n\tadd\t@CPI0_7[0], r0, r2\n\tsub.s!\t32, r1, r3\n\tadd\tr0, r0, r3\n\tadd.lt\tr2, r0, r3\n\tand\t@CPI0_7[0], r1, r1\n\tsub!\tr1, r0, r4\n\tadd.le\tr0, r0, r2\n\tsub.s!\t@CPI0_7[0], r1, r1\n\tadd\tr3, r0, r1\n\tadd.eq\tr2, r0, r1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tadd\t4, r0, r1\n\tptr.add\tstack[@ptr_calldata], r1, r1\n\tld\tr1, r1\n\tsub.s!\t16, r1, r2\n\tjump.lt\t@.BB0_42\n\tld.1\t64, r1\n\tadd\t68, r1, r2\n\tadd\t@CPI0_8[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t36, r1, r2\n\tadd\t19, r0, r3\n\tst.1\tr2, r3\n\tadd\t@CPI0_9[0], r0, r2\n\tst.1\tr1, r2\n\tadd\t4, r1, r2\n\tadd\t32, r0, r3\n\tst.1\tr2, r3\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tshl.s\t64, r1, r1\n\tor\t@CPI0_10[0], r1, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_10:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tsub.s\t4, r0, r1\n\tadd\tstack[@calldatasize], r1, r1\n\tadd\t@CPI0_7[0], r0, r2\n\tsub!\tr1, r0, r3\n\tadd\tr0, r0, r3\n\tadd.lt\tr2, r0, r3\n\tand\t@CPI0_7[0], r1, r1\n\tsub!\tr1, r0, r4\n\tadd.le\tr0, r0, r2\n\tsub.s!\t@CPI0_7[0], r1, r1\n\tadd\tr3, r0, r1\n\tadd.eq\tr2, r0, r1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tsload\tr0, r1\n\tst.1\t128, r1\n\tadd\t@CPI0_20[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_31:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tadd\tstack[@calldatasize], r0, r3\n\tsub.s\t4, r3, r1\n\tadd\t@CPI0_7[0], r0, r2\n\tsub.s!\t32, r1, r4\n\tadd\tr0, r0, r4\n\tadd.lt\tr2, r0, r4\n\tand\t@CPI0_7[0], r1, r1\n\tsub!\tr1, r0, r5\n\tadd.le\tr0, r0, r2\n\tsub.s!\t@CPI0_7[0], r1, r1\n\tadd\tr4, r0, r1\n\tadd.eq\tr2, r0, r1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tptr.add\tstack[@ptr_calldata], r0, r2\n\tptr.add.s\t4, r2, r1\n\tld\tr1, r1\n\tsub.s!\t@CPI0_11[0], r1, r4\n\tjump.gt\t@.BB0_2\n\tadd\t35, r1, r4\n\tadd\t@CPI0_7[0], r0, r5\n\tsub!\tr4, r3, r6\n\tadd\tr0, r0, r6\n\tadd.ge\tr5, r0, r6\n\tand\t@CPI0_7[0], r3, r7\n\tand\t@CPI0_7[0], r4, r4\n\tsub!\tr4, r7, r8\n\tadd.ge\tr0, r0, r5\n\txor\tr4, r7, r4\n\tsub.s!\t@CPI0_7[0], r4, r4\n\tadd\tr6, r0, r4\n\tadd.eq\tr5, r0, r4\n\tsub!\tr4, r0, r4\n\tjump.ne\t@.BB0_2\n\tadd\t4, r1, r4\n\tptr.add\tr2, r4, r2\n\tld\tr2, r2\n\tsub.s!\t@CPI0_11[0], r2, r4\n\tjump.gt\t@.BB0_2\n\tadd\t36, r1, r1\n\tadd\tr2, r1, r4\n\tsub!\tr4, r3, r3\n\tjump.le\t@.BB0_37\n.BB0_2:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_42:\n\tst.1\t0, r1\n\tadd\t1, r0, r1\n\tst.1\t32, r1\n\tnear_call\tr0, @__keccak256, @DEFAULT_UNWIND\n\tsload\tr1, r2\n\tadd\t1, r1, r1\n\tsload\tr1, r3\n\tld.1\t64, r1\n\tadd\tr1, r0, stack-[8]\n\tshr.s\t224, r3, r4\n\tnear_call\tr0, @abi_encode_bytes32_bytes32_uint32, @DEFAULT_UNWIND\n\tadd\tstack-[8], r0, r4\n\tsub\tr1, r4, r1\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tsub.s!\t@CPI0_0[0], r4, r3\n\tadd.lt\tr4, r0, r2\n\tshl.s\t64, r2, r2\n\tshl.s\t96, r1, r1\n\tor\tr1, r2, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_18:\n\tadd\tstack-[7], r0, r3\n\tadd\t544, r3, r1\n\tst.1\t64, r1\n\tst.1.inc\tr3, r2, r5\n\tadd\tstack[@calldatasize], r0, r1\n\tptr.add\tstack[@ptr_calldata], r1, r1\n\tadd\tr0, r0, r2\n.BB0_19:\n\tshl.s\t5, r2, r3\n\tadd\tr5, r3, r4\n\tptr.add\tr1, r3, r3\n\tld\tr3, r3\n\tst.1\tr4, r3\n\tadd\t1, r2, r2\n\tsub.s!\t16, r2, r3\n\tjump.lt\t@.BB0_19\n\tadd\t1, r0, r1\n\tadd\tr1, r0, stack-[5]\n\tadd\t32784, r0, r1\n\tadd\tr1, r0, stack-[4]\n\tadd\t60, r0, r1\n\tadd\tr1, r0, stack-[2]\n\tadd\tr0, r0, r1\n\tadd\tr8, r0, stack-[3]\n\tadd\tr5, r0, stack-[1]\n.BB0_21:\n\tadd\tr1, r0, stack-[8]\n\tst.1\t0, r1\n\tadd\tstack-[5], r0, r1\n\tst.1\t32, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.lt\tr2, r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_15[0], r1, r1\n\tadd\tstack-[4], r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tld.1\t64, r2\n\tsub.s!\t@CPI0_16[0], r2, r3\n\tadd\tstack-[3], r0, r8\n\tjump.gt\t@.BB0_16\n\tld\tr1, r3\n\tadd\t96, r2, r1\n\tst.1\t64, r1\n\tadd\tstack-[2], r0, r1\n\tst.1.inc\tr2, r1, r4\n\tadd\tstack[@calldatasize], r0, r1\n\tptr.add\tstack[@ptr_calldata], r1, r1\n\tadd\tr0, r0, r5\n.BB0_24:\n\tshl.s\t5, r5, r6\n\tadd\tr4, r6, r7\n\tptr.add\tr1, r6, r6\n\tld\tr6, r6\n\tst.1\tr7, r6\n\tadd\t1, r5, r5\n\tsub.s!\t2, r5, r6\n\tjump.lt\t@.BB0_24\n\tadd\t1, r3, r1\n\tsload\tr1, r1\n\tld.1.inc\tr3, r3, r5\n\tst.1\tr4, r3\n\tadd\t64, r2, r3\n\tld.1\tr5, r4\n\tand\t@CPI0_17[0], r4, r4\n\tst.1\tr3, r4\n\tld.1\tr8, r3\n\tadd\tstack-[8], r0, r6\n\tsub!\tr3, r6, r3\n\tjump.le\t@.BB0_26\n\tshl.s\t5, r6, r3\n\tadd\tstack-[6], r0, r4\n\tadd\tr3, r4, r4\n\tst.1\tr4, r2\n\tld.1\tr8, r2\n\tsub!\tr2, r6, r2\n\tjump.le\t@.BB0_26\n\tadd\tstack-[7], r0, r2\n\tld.1\tr2, r2\n\tsub!\tr2, r6, r2\n\tjump.le\t@.BB0_26\n\tshr.s\t224, r1, r1\n\tadd\tstack-[1], r0, r5\n\tadd\tr3, r5, r2\n\tst.1\tr2, r1\n\tadd\t1, r6, r1\n\tsub.s!\t15, r6, r2\n\tjump.lt\t@.BB0_21\n\tld.1\t64, r1\n\tadd\tr1, r0, stack-[8]\n\tadd\tr8, r0, r2\n\tadd\tstack-[7], r0, r3\n\tnear_call\tr0, @abi_encode_array_bytes_dyn_array_uint32_dyn, @DEFAULT_UNWIND\n\tadd\tstack-[8], r0, r4\n\tsub\tr1, r4, r1\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tsub.s!\t@CPI0_0[0], r4, r3\n\tadd.lt\tr4, r0, r2\n\tshl.s\t64, r2, r2\n\tshl.s\t96, r1, r1\n\tor\tr1, r2, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_37:\n\tnear_call\tr0, @fun_storeMessage, @DEFAULT_UNWIND\n\tld.1\t64, r2\n\tst.1\tr2, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.lt\tr2, r0, r1\n\tshl.s\t64, r1, r1\n\tor\t@CPI0_12[0], r1, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_26:\n\tadd\t@CPI0_18[0], r0, r1\n\tst.1\t0, r1\n\tadd\t50, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI0_19[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end0:\n\n__keccak256:\n.func_begin1:\n\tadd\t@CPI1_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI1_0[0], r2, r3\n\tadd.lt\tr2, r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI1_1[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB1_2\n\tld\tr1, r1\n\tret\n.BB1_2:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end1:\n\nabi_encode_array_bytes_dyn_array_uint32_dyn:\n.func_begin2:\n\tadd\t64, r0, r4\n\tst.1.inc\tr1, r4, r4\n\tld.1\tr2, r5\n\tadd\t64, r1, r6\n\tst.1\tr6, r5\n\tadd\t96, r1, r6\n\tshl.s\t5, r5, r7\n\tadd\tr6, r7, r9\n\tsub!\tr5, r0, r7\n\tjump.eq\t@.BB2_4\n\tsub.s\t96, r0, r7\n\tsub\tr7, r1, r7\n\tadd\tr0, r0, r8\n\tjump\t@.BB2_2\n.BB2_9:\n\tadd\t31, r10, r11\n\tsub.s\t32, r0, r12\n\tand\tr11, r12, r11\n\tadd\tr9, r10, r10\n\tst.1\tr10, r0\n\tadd\tr9, r11, r9\n\tadd\t1, r8, r8\n\tsub!\tr8, r5, r10\n\tjump.ge\t@.BB2_4\n.BB2_2:\n\tadd\tr7, r9, r10\n\tst.1.inc\tr6, r10, r6\n\tadd\t32, r2, r2\n\tld.1\tr2, r11\n\tld.1\tr11, r10\n\tst.1.inc\tr9, r10, r9\n\tsub!\tr10, r0, r12\n\tjump.eq\t@.BB2_9\n\tadd\tr0, r0, r12\n.BB2_8:\n\tadd\tr9, r12, r13\n\tadd\t32, r12, r12\n\tadd\tr12, r11, r14\n\tld.1\tr14, r14\n\tst.1\tr13, r14\n\tsub!\tr12, r10, r13\n\tjump.lt\t@.BB2_8\n\tjump\t@.BB2_9\n.BB2_4:\n\tsub\tr9, r1, r1\n\tst.1\tr4, r1\n\tld.1\tr3, r2\n\tst.1.inc\tr9, r2, r1\n\tsub!\tr2, r0, r4\n\tjump.eq\t@.BB2_7\n\tadd\tr0, r0, r4\n.BB2_6:\n\tadd\t32, r3, r3\n\tld.1\tr3, r5\n\tand\t@CPI2_0[0], r5, r5\n\tst.1.inc\tr1, r5, r1\n\tadd\t1, r4, r4\n\tsub!\tr4, r2, r5\n\tjump.lt\t@.BB2_6\n.BB2_7:\n\tret\n.func_end2:\n\nabi_encode_bytes32_bytes32_uint32:\n.func_begin3:\n\tand\t@CPI3_0[0], r4, r4\n\tadd\t64, r1, r5\n\tst.1\tr5, r4\n\tadd\t32, r1, r4\n\tst.1\tr4, r3\n\tst.1\tr1, r2\n\tadd\t96, r1, r1\n\tret\n.func_end3:\n\nfun_storeMessage:\n.func_begin4:\n\tnop\tstack+=[4]\n\tadd\tr1, r0, r3\n\tsub.s!\t60, r2, r1\n\tjump.ne\t@.BB4_1\n\tsload\tr0, r1\n\tadd\tr1, r0, stack-[4]\n\tld.1\t64, r2\n\tsub.s!\t@CPI4_4[0], r2, r1\n\tjump.ge\t@.BB4_3\n\tadd\t64, r2, r1\n\tst.1\t64, r1\n\tptr.add\tstack[@ptr_calldata], r3, r1\n\tld\tr1, r1\n\tadd\tr2, r0, stack-[1]\n\tst.1.inc\tr2, r1, r1\n\tadd\tr1, r0, stack-[3]\n\tadd\t@CPI4_5[0], r0, r1\n\tst.2\t0, r1\n\tadd\t@CPI4_2[0], r0, r1\n\tcontext.gas_left\tr2\n\tadd\tr3, r0, stack-[2]\n\tsub.s!\t@CPI4_2[0], r2, r3\n\tadd.lt\tr2, r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI4_6[0], r1, r1\n\tadd\t32779, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB4_5\n\tld\tr1, r1\n\tshl.s\t224, r1, r1\n\tadd\tstack-[2], r0, r2\n\tadd\t32, r2, r2\n\tptr.add\tstack[@ptr_calldata], r2, r2\n\tld\tr2, r2\n\tand\t@CPI4_7[0], r2, r2\n\tor\tr2, r1, r1\n\tadd\tstack-[3], r0, r2\n\tst.1\tr2, r1\n\tadd\tstack-[4], r0, r1\n\tst.1\t0, r1\n\tadd\t1, r0, r1\n\tst.1\t32, r1\n\tadd\t@CPI4_2[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI4_2[0], r2, r3\n\tadd.lt\tr2, r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI4_8[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB4_5\n\tadd\tstack-[1], r0, r2\n\tld.1\tr2, r2\n\tld\tr1, r1\n\tsstore\tr1, r2\n\tadd\t1, r1, r1\n\tadd\tstack-[3], r0, r2\n\tld.1\tr2, r2\n\tsstore\tr1, r2\n\tld.1\t64, r1\n\tadd\tr1, r0, stack-[3]\n\tadd\t@CPI4_5[0], r0, r1\n\tst.2\t0, r1\n\tadd\t@CPI4_2[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI4_2[0], r2, r3\n\tadd.lt\tr2, r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI4_6[0], r1, r1\n\tadd\t32779, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB4_5\n\tld\tr1, r1\n\tand\t@CPI4_2[0], r1, r1\n\tadd\tstack-[3], r0, r4\n\tst.1\tr4, r1\n\tadd\t@CPI4_2[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI4_2[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tsub.s!\t@CPI4_2[0], r4, r3\n\tadd.lt\tr4, r0, r1\n\tshl.s\t64, r1, r1\n\tshl.s\t192, r2, r2\n\tor\tr2, r1, r1\n\tor\t@CPI4_9[0], r1, r1\n\tadd\t32781, r0, r2\n\tadd\t2, r0, r3\n\tadd\t@CPI4_10[0], r0, r4\n\tadd\tstack-[4], r0, r5\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r1\n\tjump.eq\t@.BB4_5\n\tsload\tr0, r1\n\tsub.s\t1, r0, r2\n\tsub!\tr1, r2, r2\n\tjump.eq\t@.BB4_10\n\tadd\t1, r1, r1\n\tand\t15, r1, r1\n\tsstore\tr0, r1\n\tadd\tstack-[4], r0, r1\n\tret\n.BB4_5:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB4_1:\n\tld.1\t64, r1\n\tadd\t68, r1, r2\n\tadd\t@CPI4_0[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t@CPI4_1[0], r0, r2\n\tst.1\tr1, r2\n\tadd\t36, r1, r2\n\tadd\t32, r0, r3\n\tst.1\tr2, r3\n\tadd\t4, r1, r2\n\tst.1\tr2, r3\n\tadd\t@CPI4_2[0], r0, r2\n\tsub.s!\t@CPI4_2[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tshl.s\t64, r1, r1\n\tor\t@CPI4_3[0], r1, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB4_3:\n\tadd\t@CPI4_11[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI4_12[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB4_10:\n\tadd\t@CPI4_11[0], r0, r1\n\tst.1\t0, r1\n\tadd\t17, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI4_12[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end4:\n\n__farcall:\n.func_begin5:\n.tmp0:\n\tfar_call\tr1, r2, @.BB5_2\n.tmp1:\n\tadd\t1, r0, r2\n\tret\n.BB5_2:\n.tmp2:\n\tadd\tr0, r0, r2\n\tret\n.func_end5:\n\n__staticcall:\n.func_begin6:\n.tmp3:\n\tfar_call.static\tr1, r2, @.BB6_2\n.tmp4:\n\tadd\t1, r0, r2\n\tret\n.BB6_2:\n.tmp5:\n\tadd\tr0, r0, r2\n\tret\n.func_end6:\n\n\t.data\n\t.p2align\t5\ncalldatasize:\n\t.cell 0\n\n\t.p2align\t5\nptr_calldata:\n.cell\t0\n\n\t.note.GNU-stack\n\t.rodata\nCPI0_0:\nCPI1_0:\nCPI2_0:\nCPI3_0:\nCPI4_2:\n\t.cell 4294967295\nCPI0_1:\n\t.cell 53919893334301279589334030174039261352344891250716429051063678533632\nCPI0_2:\n\t.cell 1638005613\nCPI0_3:\n\t.cell 1638005614\nCPI0_4:\n\t.cell 2264375003\nCPI0_5:\n\t.cell 227542446\nCPI0_6:\n\t.cell 1408623488\nCPI0_7:\n\t.cell -57896044618658097711785492504343953926634992332820282019728792003956564819968\nCPI0_8:\n\t.cell 33213884033944179210176855390387169142772069480178954493317220282132550647808\nCPI0_9:\nCPI4_1:\n\t.cell 3963877391197344453575983046348115674221700746820753546331534351508065746944\nCPI0_10:\nCPI4_3:\n\t.cell 7922816251426433759354395033600\nCPI0_11:\n\t.cell 18446744073709551615\nCPI0_12:\n\t.cell 2535301200456458802993406410752\nCPI0_13:\n\t.cell 18446744073709551072\nCPI0_14:\n\t.cell 18446744073709551071\nCPI0_15:\nCPI1_1:\nCPI4_8:\n\t.cell 904625697166532776746648320380374280103671760270919307471179981048634146816\nCPI0_16:\n\t.cell 18446744073709551519\nCPI0_17:\nCPI4_7:\n\t.cell 26959946667150639794667015087019630673637144422540572481103610249215\nCPI0_18:\nCPI4_11:\n\t.cell 35408467139433450592217433187231851964531694900788300625387963629091585785856\nCPI0_19:\nCPI4_12:\n\t.cell 2852213850513516153367582212096\nCPI0_20:\n\t.cell 2535301202817642044428229017600\nCPI4_0:\n\t.cell 35007337705935702897687720414765461662438933354768372945704699580932911555955\nCPI4_4:\n\t.cell 18446744073709551552\nCPI4_5:\n\t.cell 54919857843691310904240101001871775513466943666296306094405906504622902841650\nCPI4_6:\n\t.cell 904625751086426111047927909714404454142933102791518401696464687643217625088\nCPI4_9:\n\t.cell 904625697166532776746648320380374280103671757735618107014721178055227736064\nCPI4_10:\n\t.cell -31711154313730668524170552377954943126494038523472522627847672998507470632525\n","bytecode":{"object":""},"methodIdentifiers":{"getAllMessages()":"53f5e380","getCurrentIndex()":"0d9005ae","getMessage(uint256)":"86f79edb","storeMessage(bytes)":"61a1fb6e"}},"irOptimized":"/// @use-src 0:\"contracts/MessageStorage.sol\"\nobject \"MessageStorage_257\" {\n    code {\n        {\n            /// @src 0:485:5942  \"contract MessageStorage {...\"\n            let _1 := memoryguard(0x80)\n            mstore(64, _1)\n            if callvalue() { revert(0, 0) }\n            sstore(/** @src 0:1414:1415  \"0\" */ 0x00, 0x00)\n            /// @src 0:485:5942  \"contract MessageStorage {...\"\n            let _2 := datasize(\"MessageStorage_257_deployed\")\n            codecopy(_1, dataoffset(\"MessageStorage_257_deployed\"), _2)\n            return(_1, _2)\n        }\n    }\n    /// @use-src 0:\"contracts/MessageStorage.sol\"\n    object \"MessageStorage_257_deployed\" {\n        code {\n            {\n                /// @src 0:485:5942  \"contract MessageStorage {...\"\n                let _1 := 64\n                mstore(_1, 128)\n                if iszero(lt(calldatasize(), 4))\n                {\n                    let _2 := 0\n                    switch shr(224, calldataload(_2))\n                    case 0x0d9005ae {\n                        if callvalue() { revert(_2, _2) }\n                        if slt(add(calldatasize(), not(3)), _2) { revert(_2, _2) }\n                        mstore(128, /** @src 0:651:653  \"60\" */ sload(/** @src 0:485:5942  \"contract MessageStorage {...\" */ _2))\n                        return(128, 32)\n                    }\n                    case 0x53f5e380 {\n                        if callvalue() { revert(_2, _2) }\n                        if slt(add(calldatasize(), not(3)), _2) { revert(_2, _2) }\n                        let memPtr := allocate_memory()\n                        /// @src 0:597:599  \"16\"\n                        let _3 := 0x10\n                        /// @src 0:485:5942  \"contract MessageStorage {...\"\n                        mstore(memPtr, /** @src 0:597:599  \"16\" */ _3)\n                        /// @src 0:485:5942  \"contract MessageStorage {...\"\n                        let i := _2\n                        for { } lt(i, 512) { i := add(i, 32) }\n                        {\n                            mstore(add(add(memPtr, i), 32), 96)\n                        }\n                        /// @src 0:3835:3861  \"new uint32[](MAX_MESSAGES)\"\n                        let expr_mpos := allocate_and_zero_memory_array_array_uint32_dyn()\n                        /// @src 0:3939:3952  \"uint256 i = 0\"\n                        let var_i := /** @src 0:485:5942  \"contract MessageStorage {...\" */ _2\n                        /// @src 0:3934:4985  \"for (uint256 i = 0; i < MAX_MESSAGES; i++) {...\"\n                        for { }\n                        /** @src 0:3954:3970  \"i < MAX_MESSAGES\" */ lt(var_i, /** @src 0:597:599  \"16\" */ _3)\n                        /// @src 0:3939:3952  \"uint256 i = 0\"\n                        {\n                            /// @src 0:3972:3975  \"i++\"\n                            var_i := increment_uint256(var_i)\n                        }\n                        {\n                            /// @src 0:4018:4029  \"messages[i]\"\n                            let _4 := mapping_index_access_mapping_uint256_struct_MessageData_storage_of_uint256(var_i)\n                            /// @src 0:4129:4158  \"new bytes(MESSAGE_SIZE_BYTES)\"\n                            let expr_mpos_1 := allocate_and_zero_memory_array_bytes()\n                            /// @src 0:4254:4288  \"uint32(uint256(data.part2) >> 224)\"\n                            let expr := convert_uint256_to_uint32(/** @src 0:4261:4287  \"uint256(data.part2) >> 224\" */ shift_right_uint256_uint8(/** @src 0:485:5942  \"contract MessageStorage {...\" */ sload(/** @src 0:4269:4279  \"data.part2\" */ add(_4, /** @src 0:4018:4026  \"messages\" */ 0x01))))\n                            /// @src 0:4373:4856  \"assembly {...\"\n                            let _5 := mload(_4)\n                            /// @src 0:485:5942  \"contract MessageStorage {...\"\n                            let _6 := 32\n                            /// @src 0:4373:4856  \"assembly {...\"\n                            mstore(add(expr_mpos_1, /** @src 0:485:5942  \"contract MessageStorage {...\" */ _6), /** @src 0:4373:4856  \"assembly {...\" */ _5)\n                            mstore(add(expr_mpos_1, /** @src 0:485:5942  \"contract MessageStorage {...\" */ _1), /** @src 0:4373:4856  \"assembly {...\" */ and(mload(add(_4, /** @src 0:485:5942  \"contract MessageStorage {...\" */ _6)), /** @src 0:4373:4856  \"assembly {...\" */ sub(shl(224, 1), 1)))\n                            /// @src 0:4903:4932  \"allMessages[i] = messageBytes\"\n                            mstore(memory_array_index_access_bytes_dyn(memPtr, var_i), expr_mpos_1)\n                            pop(memory_array_index_access_bytes_dyn(memPtr, var_i))\n                            /// @src 0:4946:4974  \"allTimestamps[i] = timestamp\"\n                            write_to_memory_uint32(memory_array_index_access_bytes_dyn(expr_mpos, var_i), expr)\n                        }\n                        /// @src 0:485:5942  \"contract MessageStorage {...\"\n                        let memPos := mload(_1)\n                        return(memPos, sub(abi_encode_array_bytes_dyn_array_uint32_dyn(memPos, memPtr, expr_mpos), memPos))\n                    }\n                    case 0x61a1fb6e { external_fun_storeMessage() }\n                    case 0x86f79edb { external_fun_getMessage() }\n                }\n                revert(0, 0)\n            }\n            function abi_encode_uint256(headStart, value0) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(headStart, value0)\n            }\n            function abi_encode_array_uint32_dyn(value, pos) -> end\n            {\n                let length := mload(value)\n                mstore(pos, length)\n                let _1 := 0x20\n                pos := add(pos, _1)\n                let srcPtr := add(value, _1)\n                let i := /** @src -1:-1:-1 */ 0\n                /// @src 0:485:5942  \"contract MessageStorage {...\"\n                for { } lt(i, length) { i := add(i, 1) }\n                {\n                    mstore(pos, and(mload(srcPtr), 0xffffffff))\n                    pos := add(pos, _1)\n                    srcPtr := add(srcPtr, _1)\n                }\n                end := pos\n            }\n            function abi_encode_array_bytes_dyn_array_uint32_dyn(headStart, value0, value1) -> tail\n            {\n                let tail_1 := add(headStart, 64)\n                mstore(headStart, 64)\n                let pos := tail_1\n                let length := mload(value0)\n                mstore(tail_1, length)\n                pos := add(headStart, 96)\n                let tail_2 := add(add(headStart, shl(5, length)), 96)\n                let _1 := 0x20\n                let srcPtr := add(value0, _1)\n                let i := 0\n                let i_1 := i\n                for { } lt(i_1, length) { i_1 := add(i_1, 1) }\n                {\n                    mstore(pos, add(sub(tail_2, headStart), not(95)))\n                    let _2 := mload(srcPtr)\n                    let length_1 := mload(_2)\n                    mstore(tail_2, length_1)\n                    let i_2 := i\n                    for { } lt(i_2, length_1) { i_2 := add(i_2, _1) }\n                    {\n                        mstore(add(add(tail_2, i_2), _1), mload(add(add(_2, i_2), _1)))\n                    }\n                    mstore(add(add(tail_2, length_1), _1), i)\n                    tail_2 := add(add(tail_2, and(add(length_1, 31), not(31))), _1)\n                    srcPtr := add(srcPtr, _1)\n                    pos := add(pos, _1)\n                }\n                mstore(add(headStart, _1), sub(tail_2, headStart))\n                tail := abi_encode_array_uint32_dyn(value1, tail_2)\n            }\n            function external_fun_storeMessage()\n            {\n                if callvalue() { revert(0, 0) }\n                if slt(add(calldatasize(), not(3)), 32)\n                {\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 0:485:5942  \"contract MessageStorage {...\"\n                let offset := calldataload(4)\n                let _1 := 0xffffffffffffffff\n                if gt(offset, _1)\n                {\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 0:485:5942  \"contract MessageStorage {...\"\n                if iszero(slt(add(offset, 35), calldatasize()))\n                {\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 0:485:5942  \"contract MessageStorage {...\"\n                let length := calldataload(add(4, offset))\n                if gt(length, _1)\n                {\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 0:485:5942  \"contract MessageStorage {...\"\n                if gt(add(add(offset, length), 36), calldatasize())\n                {\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 0:485:5942  \"contract MessageStorage {...\"\n                let ret := fun_storeMessage(add(offset, 36), length)\n                let memPos := mload(64)\n                return(memPos, sub(abi_encode_uint256(memPos, ret), memPos))\n            }\n            function abi_encode_bytes32_bytes32_uint32(headStart, value0, value1, value2) -> tail\n            {\n                tail := add(headStart, 96)\n                mstore(headStart, value0)\n                mstore(add(headStart, 32), value1)\n                mstore(add(headStart, 64), and(value2, 0xffffffff))\n            }\n            function external_fun_getMessage()\n            {\n                if callvalue() { revert(0, 0) }\n                if slt(add(calldatasize(), not(3)), 32)\n                {\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 0:485:5942  \"contract MessageStorage {...\"\n                let value := calldataload(4)\n                if iszero(/** @src 0:5454:5474  \"index < MAX_MESSAGES\" */ lt(value, /** @src 0:597:599  \"16\" */ 0x10))\n                /// @src 0:485:5942  \"contract MessageStorage {...\"\n                {\n                    let memPtr := mload(64)\n                    mstore(memPtr, shl(229, 4594637))\n                    mstore(add(memPtr, 4), 32)\n                    mstore(add(memPtr, 36), 19)\n                    mstore(add(memPtr, 68), \"Index out of bounds\")\n                    revert(memPtr, 100)\n                }\n                /// @src 0:651:653  \"60\"\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 0:651:653  \"60\" */ value)\n                mstore(/** @src 0:485:5942  \"contract MessageStorage {...\" */ 32, 1)\n                /// @src 0:651:653  \"60\"\n                let dataSlot := keccak256(/** @src -1:-1:-1 */ 0, /** @src 0:651:653  \"60\" */ 0x40)\n                /// @src 0:485:5942  \"contract MessageStorage {...\"\n                let _1 := sload(/** @src 0:5654:5664  \"data.part2\" */ add(dataSlot, /** @src 0:485:5942  \"contract MessageStorage {...\" */ 1))\n                let _2 := sload(/** @src 0:5692:5702  \"data.part1\" */ dataSlot)\n                /// @src 0:485:5942  \"contract MessageStorage {...\"\n                let memPos := mload(/** @src 0:651:653  \"60\" */ 0x40)\n                /// @src 0:485:5942  \"contract MessageStorage {...\"\n                return(memPos, sub(abi_encode_bytes32_bytes32_uint32(memPos, _2, _1, shr(/** @src 0:5669:5672  \"224\" */ 0xe0, /** @src 0:485:5942  \"contract MessageStorage {...\" */ _1)), memPos))\n            }\n            /// @src 0:651:653  \"60\"\n            function convert_uint256_to_uint32(value) -> converted\n            {\n                converted := /** @src 0:485:5942  \"contract MessageStorage {...\" */ and(/** @src 0:651:653  \"60\" */ value, /** @src 0:485:5942  \"contract MessageStorage {...\" */ 0xffffffff)\n            }\n            /// @src 0:651:653  \"60\"\n            function panic_error_0x41()\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x41)\n                revert(0, 0x24)\n            }\n            function allocate_memory_2460() -> memPtr\n            {\n                memPtr := /** @src 0:485:5942  \"contract MessageStorage {...\" */ mload(/** @src 0:651:653  \"60\" */ 64)\n                let newFreePtr := add(memPtr, 64)\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n                mstore(64, newFreePtr)\n            }\n            function allocate_memory() -> memPtr\n            {\n                memPtr := /** @src 0:485:5942  \"contract MessageStorage {...\" */ mload(64)\n                /// @src 0:651:653  \"60\"\n                let newFreePtr := add(memPtr, /** @src 0:485:5942  \"contract MessageStorage {...\" */ 544)\n                /// @src 0:651:653  \"60\"\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n                mstore(/** @src 0:485:5942  \"contract MessageStorage {...\" */ 64, /** @src 0:651:653  \"60\" */ newFreePtr)\n            }\n            function mapping_index_access_mapping_uint256_struct_MessageData_storage_of_uint256(key) -> dataSlot\n            {\n                mstore(0, key)\n                mstore(0x20, /** @src 0:4018:4026  \"messages\" */ 0x01)\n                /// @src 0:651:653  \"60\"\n                dataSlot := keccak256(0, 0x40)\n            }\n            function copy_struct_to_storage_from_struct_MessageData_to_struct_MessageData(slot, value)\n            {\n                sstore(slot, mload(value))\n                sstore(add(slot, 1), mload(add(value, 32)))\n            }\n            function abi_encode_uint32(headStart, value0) -> tail\n            {\n                tail := add(headStart, 32)\n                /// @src 0:485:5942  \"contract MessageStorage {...\"\n                mstore(headStart, and(value0, 0xffffffff))\n            }\n            /// @src 0:651:653  \"60\"\n            function panic_error_0x11()\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x11)\n                revert(0, 0x24)\n            }\n            function checked_add_uint256(x) -> sum\n            {\n                sum := add(x, /** @src 0:3121:3129  \"messages\" */ 0x01)\n                /// @src 0:651:653  \"60\"\n                if gt(x, sum) { panic_error_0x11() }\n            }\n            /// @src 0:597:599  \"16\"\n            function mod_uint256(x) -> r\n            { r := and(x, 15) }\n            /// @ast-id 111 @src 0:1634:3431  \"function storeMessage(bytes calldata message) external returns (uint256) {...\"\n            function fun_storeMessage(var_message_offset, var_message_length) -> var\n            {\n                /// @src 0:651:653  \"60\"\n                if iszero(/** @src 0:1778:1814  \"message.length == MESSAGE_SIZE_BYTES\" */ eq(var_message_length, /** @src 0:651:653  \"60\" */ 0x3c))\n                {\n                    let memPtr := /** @src 0:485:5942  \"contract MessageStorage {...\" */ mload(64)\n                    /// @src 0:651:653  \"60\"\n                    mstore(memPtr, /** @src 0:485:5942  \"contract MessageStorage {...\" */ shl(229, 4594637))\n                    /// @src 0:651:653  \"60\"\n                    mstore(add(memPtr, 4), 32)\n                    /// @src 0:485:5942  \"contract MessageStorage {...\"\n                    mstore(/** @src 0:651:653  \"60\" */ add(memPtr, 36), 32)\n                    mstore(/** @src 0:485:5942  \"contract MessageStorage {...\" */ add(/** @src 0:651:653  \"60\" */ memPtr, /** @src 0:485:5942  \"contract MessageStorage {...\" */ 68), /** @src 0:651:653  \"60\" */ \"Message must be exactly 60 bytes\")\n                    revert(memPtr, 100)\n                }\n                let _1 := sload(/** @src 0:2061:2073  \"currentIndex\" */ 0x00)\n                /// @src 0:3139:3189  \"MessageData({part1: firstPart, part2: secondPart})\"\n                let expr_91_mpos := /** @src 0:651:653  \"60\" */ allocate_memory_2460()\n                mstore(expr_91_mpos, /** @src 0:2207:2289  \"assembly {...\" */ calldataload(var_message_offset))\n                /// @src 0:651:653  \"60\"\n                mstore(/** @src 0:3139:3189  \"MessageData({part1: firstPart, part2: secondPart})\" */ add(expr_91_mpos, /** @src 0:2523:3068  \"assembly {...\" */ 32), or(and(calldataload(add(var_message_offset, 32)), /** @src 0:4373:4856  \"assembly {...\" */ sub(shl(224, 1), 1)), /** @src 0:651:653  \"60\" */ and(shl(224, /** @src 0:1962:1977  \"block.timestamp\" */ timestamp()), /** @src 0:651:653  \"60\" */ shl(224, /** @src 0:485:5942  \"contract MessageStorage {...\" */ 0xffffffff))))\n                /// @src 0:651:653  \"60\"\n                copy_struct_to_storage_from_struct_MessageData_to_struct_MessageData(/** @src 0:3121:3136  \"messages[index]\" */ mapping_index_access_mapping_uint256_struct_MessageData_storage_of_uint256(_1), /** @src 0:651:653  \"60\" */ expr_91_mpos)\n                /// @src 0:3252:3283  \"MessageStored(index, timestamp)\"\n                let _2 := /** @src 0:485:5942  \"contract MessageStorage {...\" */ mload(/** @src 0:651:653  \"60\" */ 64)\n                /// @src 0:3252:3283  \"MessageStored(index, timestamp)\"\n                log2(_2, sub(abi_encode_uint32(_2, /** @src 0:485:5942  \"contract MessageStorage {...\" */ and(/** @src 0:1962:1977  \"block.timestamp\" */ timestamp(), /** @src 0:485:5942  \"contract MessageStorage {...\" */ 0xffffffff)), /** @src 0:3252:3283  \"MessageStored(index, timestamp)\" */ _2), 0xb9e41f69bdba34228b9dba54f42763e637271900a064ff2f9d9a71a2741c49b3, _1)\n                /// @src 0:651:653  \"60\"\n                sstore(/** @src 0:2061:2073  \"currentIndex\" */ 0x00, /** @src 0:3368:3401  \"(currentIndex + 1) % MAX_MESSAGES\" */ mod_uint256(/** @src 0:3369:3385  \"currentIndex + 1\" */ checked_add_uint256(/** @src 0:651:653  \"60\" */ sload(/** @src 0:2061:2073  \"currentIndex\" */ 0x00))))\n                /// @src 0:3412:3424  \"return index\"\n                var := _1\n            }\n            /// @src 0:485:5942  \"contract MessageStorage {...\"\n            function allocate_and_zero_memory_array_array_uint32_dyn() -> memPtr\n            {\n                let memPtr_1 := allocate_memory()\n                mstore(memPtr_1, /** @src 0:597:599  \"16\" */ 0x10)\n                /// @src 0:485:5942  \"contract MessageStorage {...\"\n                memPtr := memPtr_1\n                calldatacopy(add(memPtr_1, 0x20), calldatasize(), 512)\n            }\n            function increment_uint256(value) -> ret\n            {\n                if eq(value, not(0)) { panic_error_0x11() }\n                ret := add(value, 1)\n            }\n            function allocate_and_zero_memory_array_bytes() -> memPtr\n            {\n                /// @src 0:651:653  \"60\"\n                let memPtr_1 := /** @src 0:485:5942  \"contract MessageStorage {...\" */ mload(64)\n                /// @src 0:651:653  \"60\"\n                let newFreePtr := add(memPtr_1, /** @src 0:485:5942  \"contract MessageStorage {...\" */ 96)\n                /// @src 0:651:653  \"60\"\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr_1)) { panic_error_0x41() }\n                mstore(/** @src 0:485:5942  \"contract MessageStorage {...\" */ 64, /** @src 0:651:653  \"60\" */ newFreePtr)\n                /// @src 0:485:5942  \"contract MessageStorage {...\"\n                mstore(memPtr_1, /** @src 0:651:653  \"60\" */ 0x3c)\n                /// @src 0:485:5942  \"contract MessageStorage {...\"\n                memPtr := memPtr_1\n                calldatacopy(add(memPtr_1, 0x20), calldatasize(), 64)\n            }\n            function shift_right_uint256_uint8(value) -> result\n            {\n                result := shr(/** @src 0:651:653  \"60\" */ 224, /** @src 0:485:5942  \"contract MessageStorage {...\" */ value)\n            }\n            function memory_array_index_access_bytes_dyn(baseRef, index) -> addr\n            {\n                if iszero(lt(index, mload(baseRef)))\n                {\n                    mstore(0, /** @src 0:651:653  \"60\" */ shl(224, 0x4e487b71))\n                    /// @src 0:485:5942  \"contract MessageStorage {...\"\n                    mstore(4, 0x32)\n                    revert(0, 0x24)\n                }\n                addr := add(add(baseRef, shl(5, index)), 32)\n            }\n            function write_to_memory_uint32(memPtr, value)\n            {\n                mstore(memPtr, and(value, 0xffffffff))\n            }\n        }\n        data \".metadata\" hex\"a2646970667358221220b7332bb369345ce71fcccc950a467234dd88ac50e75ec995bbdb475e3724ddd064736f6c63430008140033\"\n    }\n}\n","hash":"010000ade5034d2fe5d0112db45e36bba26ce8c9e94e1256b82c911ab76f0644","factoryDependencies":{}}}}}}